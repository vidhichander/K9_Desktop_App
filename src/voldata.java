
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.StringTokenizer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author vidhi
 */
/*
This form will allow the user to search for the volunteers in the system. 
They may either search for all the data per volunteer, or they may narrow down their search by choosing a specific category (e.g. age, school, etc.)
 */
public class voldata extends javax.swing.JPanel {

    DefaultTableModel model;

    /**
     * Creates new form voldata
     */
    public voldata() {
        initComponents();
        basis.removeAllItems();
        spec.setVisible(false);
        basis.addItem("Basis of Search");
        basis.addItem("Reason for volunteering");
        basis.addItem("Job done");
        basis.addItem("Age");
        basis.addItem("School");
        basis.addItem("Total time spent at K9");
        basis.addItem("Date volunteered at K9");
        basis.addItem("All data per volunteer");
        basis.addItem("All Dog Walkers");
        model = (DefaultTableModel) tab.getModel();
        //tab.setEnabled(false);
        model.setRowCount(0);
        model.setColumnCount(0);
        tab.setEnabled(false);
        v3.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        basis = new javax.swing.JComboBox();
        spec = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        v3 = new javax.swing.JTextField();

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel4.setFont(new java.awt.Font("Chalkboard", 0, 24)); // NOI18N
        jLabel4.setText("Data of Volunteers");

        basis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basisActionPerformed(evt);
            }
        });

        spec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specActionPerformed(evt);
            }
        });

        tab.setGridColor(new java.awt.Color(204, 204, 204));
        tab.setShowGrid(true);
        tab.setShowHorizontalLines(false);
        jScrollPane1.setViewportView(tab);

        jLabel9.setIcon(new javax.swing.ImageIcon("/Users/Rajul/Downloads/logo.gif")); // NOI18N

        v3.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        v3.setForeground(java.awt.Color.lightGray);
        v3.setText("Search");
        v3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                v3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                v3FocusLost(evt);
            }
        });
        v3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                v3KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(basis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spec, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(v3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(basis, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(v3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(spec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void specActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specActionPerformed
        String x = "" + spec.getSelectedItem();
        String y = "" + basis.getSelectedItem();
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        model.setRowCount(0);
        model.setColumnCount(0);
        if (y.equals("All data per volunteer")) {
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("Field");
            model.addColumn("Data");
            int on = 0;
            String y3 = "";
            String f[] = {"Id Number: ", "Name", "Age: ", "School: ", "Mobile Number: ", "Email Id: ", "Date Started: ", "Reason for Volunteering ", "Work done", "", "", "", ""};

            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";

                while ((no = tdata.readLine()) != null) {

                    StringTokenizer ot = new StringTokenizer(no, "|");
                    on = ot.countTokens();

                    String c[] = new String[on];

                    for (int i = 0; i < on; i++) {
                        c[i] = ot.nextToken();
                    }
                    for (int i = 0; i < on; i++) {
                        if (c[i].equals("CAS") || c[i].equals("DOE-Bronze") || c[i].equals("DOE-Silver") || c[i].equals("DOE-Gold") || c[i].equals("Just wishes to volunteer")) {
                            y3 = c[7];
                            c[7] = c[i];
                            c[i] = y3;
                        }
                    }

                    if (x.equals(c[1])) {
                        for (int i = 0; i < on; i++) {
                            model.insertRow(model.getRowCount(), new Object[]{f[i], c[i]});

                        }
                    }
                }
            } catch (Exception error) {
            }
        }
        if (y.equals("Reason for volunteering")) {
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("ID");
            model.addColumn("Name");
            model.addColumn("Mobile no.");
            model.addColumn("Email Id");

            int on = 0;
            String y3 = "";

            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";

                while ((no = tdata.readLine()) != null) {

                    StringTokenizer ot = new StringTokenizer(no, "|");
                    on = ot.countTokens();

                    String c[] = new String[on];

                    for (int i = 0; i < on; i++) {
                        c[i] = ot.nextToken();
                    }
                    for (int i = 0; i < on; i++) {
                        if (c[i].equals("CAS") || c[i].equals("DOE-Bronze") || c[i].equals("DOE-Silver") || c[i].equals("DOE-Gold") || c[i].equals("Just wishes to volunteer")) {
                            y3 = c[7];
                            c[7] = c[i];
                            c[i] = y3;
                        }
                    }

                    if (x.equals(c[7])) {
                        model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], c[4], c[5]});

                    }
                }
            } catch (Exception error) {
            }
        }
        if (y.equals("Job done")) {
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("ID");
            model.addColumn("Name");
            model.addColumn("Mobile no.");
            model.addColumn("Email Id");

            int on = 0;
            String y3 = "";

            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";

                while ((no = tdata.readLine()) != null) {

                    StringTokenizer ot = new StringTokenizer(no, "|");
                    on = ot.countTokens();

                    String c[] = new String[on];

                    for (int i = 0; i < on; i++) {
                        c[i] = ot.nextToken();
                    }
                    for (int i = 0; i < on; i++) {
                        if (c[i].equals("CAS") || c[i].equals("DOE-Bronze") || c[i].equals("DOE-Silver") || c[i].equals("DOE-Gold") || c[i].equals("Just wishes to volunteer")) {
                            y3 = c[7];
                            c[7] = c[i];
                            c[i] = y3;
                        }
                    }
                    for (int i = 8; i < on; i++) {

                        if (x.equals(c[i])) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], c[4], c[5]});

                        }
                    }
                }
            } catch (Exception error) {
            }
        }
        if (y.equals("Age")) {
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("ID");
            model.addColumn("Name");
            model.addColumn("Mobile no.");
            model.addColumn("Email Id");

            int on = 0;
            String y3 = "";

            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";

                while ((no = tdata.readLine()) != null) {

                    StringTokenizer ot = new StringTokenizer(no, "|");
                    on = ot.countTokens();

                    String c[] = new String[on];

                    for (int i = 0; i < on; i++) {
                        c[i] = ot.nextToken();
                    }

                    if (x.equals("Less than 12 years")) {
                        if (Integer.parseInt(c[2]) < 12) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], c[4], c[5]});
                        }
                    }

                    if (x.equals("12-15 years")) {
                        if (Integer.parseInt(c[2]) <= 15 && Integer.parseInt(c[2]) >= 12) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], c[4], c[5]});
                        }
                    }

                    if (x.equals("16-18 years")) {
                        if (Integer.parseInt(c[2]) <= 18 && Integer.parseInt(c[2]) >= 16) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], c[4], c[5]});
                        }
                    }

                    if (x.equals("Greater than 18 years")) {
                        if (Integer.parseInt(c[2]) > 18) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], c[4], c[5]});
                        }
                    }

                }
            } catch (Exception error) {
            }
        }
        if (y.equals("School")) {
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("ID");
            model.addColumn("Name");
            model.addColumn("Mobile no.");
            model.addColumn("Email Id");

            int on = 0;
            String y3 = "";

            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";

                while ((no = tdata.readLine()) != null) {

                    StringTokenizer ot = new StringTokenizer(no, "|");
                    on = ot.countTokens();

                    String c[] = new String[on];

                    for (int i = 0; i < on; i++) {
                        c[i] = ot.nextToken();
                    }
                    for (int i = 0; i < on; i++) {
                        if (c[i].equals("CAS") || c[i].equals("DOE-Bronze") || c[i].equals("DOE-Silver") || c[i].equals("DOE-Gold") || c[i].equals("Just wishes to volunteer")) {
                            y3 = c[7];
                            c[7] = c[i];
                            c[i] = y3;
                        }
                    }

                    if (x.equals(c[3])) {
                        model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], c[4], c[5]});

                    }
                }
            } catch (Exception error) {
            }
        }
        if (y.equals("Total time spent at K9")) {
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("ID");
            model.addColumn("Name");
            model.addColumn("Time spent");

            model.addColumn("Mobile no.");
            model.addColumn("Email Id");
            int on = 0;
            int p = 0;
            int j = 0;
            int v = 0;
            int w = 0;

            int u = 0;
            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";

                while ((no = tdata.readLine()) != null) {
                    j = 0;
                    u = 0;
                    StringTokenizer ot = new StringTokenizer(no, "|");
                    on = ot.countTokens();

                    String c[] = new String[on];

                    for (int i = 0; i < on; i++) {
                        c[i] = ot.nextToken();
                    }
                    try {
                        FileReader tid1 = new FileReader("Volunteer checkout.txt");
                        BufferedReader tdata1 = new BufferedReader(tid1);
                        String no1 = "";
                        while ((no1 = tdata1.readLine()) != null) {
                            StringTokenizer ot1 = new StringTokenizer(no1, "|");
                            String c1 = ot1.nextToken();
                            String d1 = ot1.nextToken();
                            String e1 = ot1.nextToken();
                            String f1 = ot1.nextToken();
                            String g1 = ot1.nextToken();
                            String h1 = ot1.nextToken();

                            if (c1.equals(c[0])) {
                                j = j + Integer.parseInt(g1);
                                u = u + Integer.parseInt(h1);

                                if (u > 60) {
                                    v = u / 60;
                                    w = u % 60;
                                    u = w;
                                    j = j + v;
                                }
                            }
                        }
                    } catch (Exception err) {

                    }

                    if (x.equals("Less than 5 hours")) {
                        if (j < 5) {
                            if (!(j == 0 && u == 0)) {
                                model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], j + " hours " + u + " minutes", c[4], c[5]});
                            }
                        }
                    }

                    if (x.equals("5-15 hours")) {
                        if (j <= 15 && j >= 5) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], j + " hours " + u + " minutes", c[4], c[5]});
                        }
                    }

                    if (x.equals("16-24 hours")) {
                        if (j <= 24 && j >= 16) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], j + " hours " + u + " minutes", c[4], c[5]});
                        }
                    }

                    if (x.equals("25-35 hours")) {
                        if (j <= 35 && j >= 25) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], j + " hours " + u + " minutes", c[4], c[5]});
                        }
                    }
                    if (x.equals("36-50 hours")) {
                        if (j <= 50 && j >= 36) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], j + " hours " + u + " minutes", c[4], c[5]});
                        }
                    }
                    if (x.equals("More than 50 hours")) {
                        if (j > 50) {
                            model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], j + " hours " + u + " minutes", c[4], c[5]});
                        }
                    }
                }
            } catch (Exception error) {
            }

        }
        if (y.equals("Date volunteered at K9")) {
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("ID");
            model.addColumn("Name");
            int on = 0;
            String y3 = "";
            model.addColumn("Mobile no.");
            model.addColumn("Email Id");
            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";

                while ((no = tdata.readLine()) != null) {

                    StringTokenizer ot = new StringTokenizer(no, "|");
                    on = ot.countTokens();

                    String c[] = new String[on];

                    for (int i = 0; i < on; i++) {
                        c[i] = ot.nextToken();
                    }

                    try {
                        FileReader tid1 = new FileReader("Volunteer checkin.txt");
                        BufferedReader tdata1 = new BufferedReader(tid1);
                        String no1 = "";
                        while ((no1 = tdata1.readLine()) != null) {
                            StringTokenizer ot1 = new StringTokenizer(no1, "|");
                            String c1 = ot1.nextToken();
                            String d1 = ot1.nextToken();

                            if (x.equals(d1)) {
                                if (c1.equals(c[0])) {
                                    model.insertRow(model.getRowCount(), new Object[]{c[0], c[1], c[4], c[5]});
                                }

                            }
                        }
                    } catch (Exception error) {
                    }
                }

            } catch (Exception err) {

            }
        }


    }//GEN-LAST:event_specActionPerformed

    private void basisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basisActionPerformed
        String ba = "" + basis.getSelectedItem();
        if (ba.equals("Basis of Search")) {
            spec.setVisible(false);
            v3.setVisible(false);
        }
        if (ba.equals("Reason for volunteering")) {
            spec.setVisible(true);
            spec.removeAllItems();
            v3.setVisible(false);
            spec.addItem("Select Reason");
            spec.addItem("CAS");
            spec.addItem("DOE-Bronze");
            spec.addItem("DOE-Silver");
            spec.addItem("DOE-Gold");
            spec.addItem("Just wishes to volunteer");
        }
        if (ba.equals("Job done")) {
            v3.setVisible(false);

            spec.setVisible(true);
            spec.removeAllItems();
            spec.addItem("Select Job");
            spec.addItem("Dog walking");
            spec.addItem("Market faires and bazaars");
            spec.addItem("Dog training sessions");
            spec.addItem("Conducting book sales");
            spec.addItem("Working at kennels");

        }

        if (ba.equals("Age")) {
            v3.setVisible(false);

            spec.setVisible(true);
            spec.removeAllItems();
            spec.addItem("Select Age");

            spec.addItem("Less than 12 years");
            spec.addItem("12-15 years");
            spec.addItem("16-18 years");
            spec.addItem("Greater than 18 years");
        }
        if (ba.equals("School")) {
            v3.setVisible(false);

            spec.setVisible(true);
            spec.removeAllItems();
            spec.addItem("Select School");
            int x = 0;
            Object l = "";
            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";
                while ((no = tdata.readLine()) != null) {
                    x = 0;
                    StringTokenizer ot = new StringTokenizer(no, "|");
                    String c = ot.nextToken();
                    String d = ot.nextToken();
                    String e = ot.nextToken();
                    String f = ot.nextToken();
                    int p = spec.getItemCount();
                    for (int i = 0; i < p; i++) {
                        l = spec.getItemAt(i);
                        if (f.equals(l)) {
                            x = x + 1;
                        }
                    }
                    if (x == 0) {
                        spec.addItem(f);
                    }
                }

            } catch (Exception err) {

            }

        }
        if (ba.equals("Total time spent at K9")) {
            v3.setVisible(false);

            spec.setVisible(true);
            spec.removeAllItems();
            spec.addItem("Select Time");
            spec.addItem("Less than 5 hours");
            spec.addItem("5-15 hours");
            spec.addItem("16-24 hours");
            spec.addItem("25-35 hours");
            spec.addItem("36-50 hours");
            spec.addItem("More than 50 hours");

        }
        if (ba.equals("Date volunteered at K9")) {
            v3.setVisible(false);

            spec.setVisible(true);
            spec.removeAllItems();
            spec.addItem("Select Date");
            int x = 0;
            Object l = "";
            try {
                FileReader tid = new FileReader("Volunteer checkin.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";
                while ((no = tdata.readLine()) != null) {
                    x = 0;
                    StringTokenizer ot = new StringTokenizer(no, "|");
                    String c = ot.nextToken();
                    String d = ot.nextToken();
                    int p = spec.getItemCount();
                    for (int i = 0; i < p; i++) {
                        l = spec.getItemAt(i);
                        if (d.equals(l)) {
                            x = x + 1;
                        }
                    }
                    if (x == 0) {
                        spec.addItem(d);
                    }
                }

            } catch (Exception err) {

            }

        }
        if (ba.equals("All data per volunteer")) {
            v3.setVisible(true);

            spec.setVisible(true);
            spec.removeAllItems();
            spec.addItem("Select Volunteer");
            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";
                while ((no = tdata.readLine()) != null) {
                    StringTokenizer ot = new StringTokenizer(no, "|");
                    String c = ot.nextToken();
                    String d = ot.nextToken();

                    spec.addItem(d);

                }

            } catch (Exception err) {

            }
        }
        if (ba.equals("All Dog Walkers")) {
            {
                spec.setVisible(false);
                spec.removeAllItems();
                spec.addItem("Search for specific dog walker");
                model.setColumnCount(0);
                model.setRowCount(0);
                model.addColumn("Name");
                model.addColumn("Address");
                model.addColumn("Mobile no.");
                int x = 0;
                Object l = "";
                try {
                    FileReader tid = new FileReader("Dog Walking.txt");
                    BufferedReader tdata = new BufferedReader(tid);
                    String no = "";
                    while ((no = tdata.readLine()) != null) {
                        x = 0;
                        StringTokenizer ot = new StringTokenizer(no, "|");
                        String c = ot.nextToken();
                        String d = ot.nextToken();
                        String e = ot.nextToken();
                        String f = ot.nextToken();
                        String g = ot.nextToken();
                        String h = ot.nextToken();
                        String i = ot.nextToken();
                        int p = spec.getItemCount();
                        for (int j = 0; j < p; j++) {
                            l = spec.getItemAt(j);
                            if (g.equals(l)) {
                                x = x + 1;
                            }
                        }
                        if (x == 0) {
                            spec.addItem(g);
                            model.insertRow(model.getRowCount(), new Object[]{g, h, i});

                        }

                    }

                } catch (Exception err) {

                }
            }

        }    }//GEN-LAST:event_basisActionPerformed

    private void v3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_v3KeyReleased
        // TODO add your handling code here:
        spec.removeAllItems();
        String v = v3.getText();
        int le = v.length();

        String x = "";
        try {
            FileReader tid = new FileReader("Volunteers.txt");
            BufferedReader tdata = new BufferedReader(tid);
            String no = "";
            while ((no = tdata.readLine()) != null) {
                StringTokenizer ot = new StringTokenizer(no, "|");
                String c = ot.nextToken();
                String d = ot.nextToken();
                x = "";
                for (int i = 0; i < le; i++) {
                    x = x + d.substring(i, i + 1);

                    if ((x).equals(v) || x.toUpperCase().equals(v) || x.toLowerCase().equals(v)) {
                        spec.addItem(d);
                    }

                }

            }
        } catch (Exception err) {

        }
        if (v.equals("")) {
            spec.removeAllItems();
            spec.addItem("Select Volunteer");
            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";
                while ((no = tdata.readLine()) != null) {
                    StringTokenizer ot = new StringTokenizer(no, "|");
                    String c = ot.nextToken();
                    String d = ot.nextToken();
                    spec.addItem(d);
                }

            } catch (Exception err) {

            }
        }
    }//GEN-LAST:event_v3KeyReleased

    private void v3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_v3FocusGained
        v3.setText("Search");
        v3.setForeground(Color.lightGray);         // TODO add your handling code here:
    }//GEN-LAST:event_v3FocusGained

    private void v3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_v3FocusLost
        if ((v3.getText()).equals("")) {
            v3.setText("Search");
            v3.setForeground(Color.lightGray);
        }         // TODO add your handling code here:
    }//GEN-LAST:event_v3FocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox basis;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox spec;
    private javax.swing.JTable tab;
    private javax.swing.JTextField v3;
    // End of variables declaration//GEN-END:variables
}
