
import static java.awt.AWTEventMulticaster.add;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author vidhi
 */

/* This form will allow the user to choose/enter the name of a dog in the system that had been checked out on the same day or a day earlier. 
   The time will be generated by the system and the duration that the dog was taken out for will be automatically calculated and saved. 
*/

public class dogwalkingout extends javax.swing.JPanel {

    /**
     * Creates new form dogwalkingout
     */
    public dogwalkingout() {
        initComponents();
        nacombo.removeAllItems();
        nacombo.addItem("Select Dog");
        h.setEditable(false);
        min.setEditable(false);
        t4.setEditable(false);
        t5.setEditable(false);
        Date date1 = new Date();
        DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        String dat2 = format.format(date1);
        da.setText(String.valueOf(dat2));
        int h1 = LocalDateTime.now().getHour();
        int m = LocalDateTime.now().getMinute();
        t4.setText(String.valueOf(h1));
        if (m < 10) {
            String m1 = "0" + String.valueOf(m);
            t5.setText(String.valueOf(m1));

        } else {
            t5.setText(String.valueOf(m));

        }
        h.setText("");
        min.setText("");

        try {
            FileReader tid = new FileReader("Dog Walking.txt");
            BufferedReader tdata = new BufferedReader(tid);
            String no = "";
            while ((no = tdata.readLine()) != null) {
                StringTokenizer ot = new StringTokenizer(no, "|");
                String c = ot.nextToken();
                String d = ot.nextToken();
                String c1 = ot.nextToken();
                String d1 = ot.nextToken();
                String c2 = ot.nextToken();
                String d3 = ot.nextToken();
                Date d2 = format.parse(d);
                nacombo.addItem(c);
                try {
                    FileReader tida = new FileReader("Dogs checkin.txt");
                    BufferedReader tdataa = new BufferedReader(tida);
                    String noa = "";
                    while ((noa = tdataa.readLine()) != null) {
                        StringTokenizer ota = new StringTokenizer(noa, "|");
                        String ca = ota.nextToken();
                        String da5 = ota.nextToken();
                        String ca1 = ota.nextToken();
                        String da1 = ota.nextToken();
                        String ca2 = ota.nextToken();
                        String da3 = ota.nextToken();
                        Date da4 = format.parse(ca);
                        int dda;
                        int ddd;
                        if ((Integer.parseInt(ca2) + Integer.parseInt(ca1)) >= 24) {
                            dda = Math.round(Integer.parseInt(ca2) / 24);
                            ddd = dda + 1;

                        } else {
                            dda = 0;
                            ddd = 0;
                        }
                        Date dateBefore = new Date(da4.getTime() - dda * 24 * 3600 * 1000);
                        String db = format.format(dateBefore);
                        Date dateBefore1 = new Date(da4.getTime() - ddd * 24 * 3600 * 1000);
                        String db1 = format.format(dateBefore1);
                        if (da5.equals(c)) {
                            if (db.equals(d) || (db1.equals(d))) {
                                nacombo.removeItem(c);

                            }

                        }

                    }

                } catch (Exception err) {

                }

            }

        } catch (Exception err) {

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        date = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        da2 = new javax.swing.JLabel();
        name1 = new javax.swing.JTextField();
        na1 = new javax.swing.JLabel();
        nacombo = new javax.swing.JComboBox();
        te = new javax.swing.JLabel();
        t4 = new javax.swing.JTextField();
        t5 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        h = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        min = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        da = new javax.swing.JTextField();

        date.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dateFocusGained(evt);
            }
        });

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel4.setFont(new java.awt.Font("Chalkboard", 0, 36)); // NOI18N
        jLabel4.setText("Dog Walking");

        jLabel3.setFont(new java.awt.Font("Chalkboard", 0, 36)); // NOI18N
        jLabel3.setText("Check In");

        jLabel5.setIcon(new javax.swing.ImageIcon("/Users/Rajul/Downloads/logo.gif")); // NOI18N

        jLabel8.setFont(new java.awt.Font("Chalkboard SE", 2, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setText("Record each dog that is brought back");

        jLabel11.setFont(new java.awt.Font("Chalkboard SE", 2, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 153));
        jLabel11.setText("after dog walking");

        da2.setFont(new java.awt.Font("Chalkboard", 0, 14)); // NOI18N
        da2.setText("Date:");

        name1.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        name1.setForeground(java.awt.Color.lightGray);
        name1.setText("Search");
        name1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                name1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                name1FocusLost(evt);
            }
        });
        name1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                name1KeyReleased(evt);
            }
        });

        na1.setFont(new java.awt.Font("Chalkboard", 0, 14)); // NOI18N
        na1.setText("Name of dog:");

        nacombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nacomboFocusGained(evt);
            }
        });
        nacombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nacomboActionPerformed(evt);
            }
        });
        nacombo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                nacomboPropertyChange(evt);
            }
        });

        te.setFont(new java.awt.Font("Chalkboard", 0, 14)); // NOI18N
        te.setText("Time Ended (24hr clock):");

        t4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t4FocusGained(evt);
            }
        });
        t4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t4ActionPerformed(evt);
            }
        });
        t4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                t4KeyReleased(evt);
            }
        });

        t5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t5FocusGained(evt);
            }
        });
        t5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t5ActionPerformed(evt);
            }
        });
        t5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                t5KeyReleased(evt);
            }
        });

        jLabel20.setText(":");

        jLabel6.setText("Duration:");

        h.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hActionPerformed(evt);
            }
        });

        jLabel9.setText("Hours");

        jLabel10.setText("Mins");

        jButton1.setFont(new java.awt.Font("Chalkboard", 0, 14)); // NOI18N
        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        da.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                daFocusGained(evt);
            }
        });
        da.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                daKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(43, 43, 43))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)))
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(te)
                                        .addGap(24, 24, 24)
                                        .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(h, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(na1)
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(nacombo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(da2)
                                            .addGap(67, 67, 67)
                                            .addComponent(da, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(da, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(da2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(na1)
                    .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nacombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(te))
                    .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel20))
                    .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(h, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void name1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_name1FocusGained
name1.setText("");
        name1.setForeground(Color.black);        na1.setText("Name of dog:");
        na1.setForeground(Color.black);        // TODO add your handling code here:
    }//GEN-LAST:event_name1FocusGained

    private void name1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_name1FocusLost
if ((name1.getText()).equals("")){
    name1.setText("Search");
    name1.setForeground(Color.lightGray);}        // TODO add your handling code here:
    }//GEN-LAST:event_name1FocusLost

    private void name1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_name1KeyReleased
        h.setText("");
        min.setText("");
        DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        String da1 = da.getText();
        Date date1 = new Date();
        nacombo.removeAllItems();
        String n = name1.getText();
        int le = n.length();
        String x = "";
        try {
            FileReader stud = new FileReader("Dog Walking.txt");
            BufferedReader studa = new BufferedReader(stud);
            String no = "";
            while ((no = studa.readLine()) != null) {
                StringTokenizer pz = new StringTokenizer(no, "|");
                String c = pz.nextToken();
                String d = pz.nextToken();
                String c1 = pz.nextToken();
                String d1 = pz.nextToken();
                String c2 = pz.nextToken();
                String d3 = pz.nextToken();
                Date d2 = format.parse(d);

                x = "";
                for (int i = 0; i < le; i++) {
                    x = x + c.substring(i, i + 1);
                    if ((x).equals(n) || x.toUpperCase().equals(n) || x.toLowerCase().equals(n)) {

                        nacombo.addItem(c);

                        try {
                            FileReader tida = new FileReader("Dogs checkin.txt");
                            BufferedReader tdataa = new BufferedReader(tida);
                            String noa = "";
                            while ((noa = tdataa.readLine()) != null) {
                                StringTokenizer ota = new StringTokenizer(noa, "|");
                                String ca = ota.nextToken();
                                String da5 = ota.nextToken();
                                String ca1 = ota.nextToken();
                                String da7 = ota.nextToken();
                                String ca2 = ota.nextToken();
                                String da3 = ota.nextToken();
                                Date da4 = format.parse(ca);
                                int dda;
                                int ddd;
                                if ((Integer.parseInt(ca2) + Integer.parseInt(ca1)) >= 24) {
                                    dda = Math.round(Integer.parseInt(ca2) / 24);
                                    ddd = dda + 1;

                                } else {
                                    dda = 0;
                                    ddd = 0;
                                }
                                Date dateBefore = new Date(da4.getTime() - dda * 24 * 3600 * 1000);
                                String db = format.format(dateBefore);
                                Date dateBefore1 = new Date(da4.getTime() - ddd * 24 * 3600 * 1000);
                                String db1 = format.format(dateBefore1);
                                if (da5.equals(c)) {
                                    if (db.equals(d) || (db1.equals(d))) {
                                        nacombo.removeItem(c);

                                    }

                                }

                            }

                        } catch (Exception err) {

                        }
                    }
                }
            }

        } catch (Exception err) {

        }

        if (n.equals(
                "")) {
            nacombo.removeAllItems();
            nacombo.addItem("Select Dog");
            try {
                FileReader tid = new FileReader("Dog Walking.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";
                while ((no = tdata.readLine()) != null) {
                    StringTokenizer ot = new StringTokenizer(no, "|");
                    String c = ot.nextToken();
                    String d = ot.nextToken();
                    String c1 = ot.nextToken();
                    String d1 = ot.nextToken();
                    String c2 = ot.nextToken();
                    String d3 = ot.nextToken();
                    Date d2 = format.parse(d);
                    nacombo.addItem(c);
                    try {
                        FileReader tida = new FileReader("Dogs checkin.txt");
                        BufferedReader tdataa = new BufferedReader(tida);
                        String noa = "";
                        while ((noa = tdataa.readLine()) != null) {
                            StringTokenizer ota = new StringTokenizer(noa, "|");
                            String ca = ota.nextToken();
                            String da5 = ota.nextToken();
                            String ca1 = ota.nextToken();
                            String da15 = ota.nextToken();
                            String ca2 = ota.nextToken();
                            String da3 = ota.nextToken();
                            Date da4 = format.parse(ca);
                            int dda;
                            int ddd;
                            if ((Integer.parseInt(ca2) + Integer.parseInt(ca1)) >= 24) {
                                dda = Math.round(Integer.parseInt(ca2) / 24);
                                ddd = dda + 1;

                            } else {
                                dda = 0;
                                ddd = 0;
                            }
                            Date dateBefore = new Date(da4.getTime() - dda * 24 * 3600 * 1000);
                            String db = format.format(dateBefore);
                            Date dateBefore1 = new Date(da4.getTime() - ddd * 24 * 3600 * 1000);
                            String db1 = format.format(dateBefore1);
                            if (da5.equals(c)) {
                                if (db.equals(d) || (db1.equals(d))) {
                                    nacombo.removeItem(c);

                                }

                            }

                        }

                    } catch (Exception err) {

                    }

                }

            } catch (Exception err) {

            }
        }

        String h11 = t4.getText();
        String m11 = t5.getText();
        int x1 = 0;
        int y = 0;
        String comb = "" + nacombo.getSelectedItem();
        String ds = format.format(date1);

        if (!(h11.equals(
                "")) && !(m11.equals(""))) {
            int hr1 = Integer.parseInt(h11);
            int min1 = Integer.parseInt(m11);
            try {
                FileReader stud = new FileReader("Dog Walking.txt");
                BufferedReader studa = new BufferedReader(stud);
                String no = "";
                while ((no = studa.readLine()) != null) {
                    StringTokenizer pz = new StringTokenizer(no, "|");
                    String i = pz.nextToken();
                    String e = pz.nextToken();
                    int h2 = Integer.parseInt(pz.nextToken());
                    int min2 = Integer.parseInt(pz.nextToken());
                    Date e1 = format.parse(e);
                    String diff = "";
                    long timeDiff = Math.abs(date1.getTime() - e1.getTime());
                    long hours1 = TimeUnit.MILLISECONDS.toHours(timeDiff);
                    long difference = (hours1 / 24) + 1;
                    diff = String.format("%d", difference);
                    int dif = Integer.parseInt(diff);
                    if (i.equals(comb)) {
                        if (min1 >= min2) {
                            x1 = (hr1 - h2) + (24 * (dif - 1));
                            y = min1 - min2;

                        }
                        if (min1 < min2) {
                            x1 = (hr1 - h2) + ((24 * (dif - 1)) - 1);
                            y = (min1 + 60) - min2;

                        }
                    }

                }
            } catch (Exception error) {

            }

            h.setText(String.valueOf(x1));
            min.setText(String.valueOf(y));

        }

        if (h11.equals(
                "") || m11.equals("")) {
            h.setText("");
            min.setText("");

        }

    }//GEN-LAST:event_name1KeyReleased

    private void nacomboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nacomboFocusGained
        na1.setText("Name of dog:");
        na1.setForeground(Color.black);
    }//GEN-LAST:event_nacomboFocusGained

    private void nacomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nacomboActionPerformed
        String h11 = t4.getText();
        String m11 = t5.getText();
        int x1 = 0;
        int y = 0;
        DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        Date date1 = new Date();

        String comb = "" + nacombo.getSelectedItem();
        String ds = format.format(date1);

        if (!(h11.equals("")) && !(m11.equals(""))) {
            int hr1 = Integer.parseInt(h11);
            int min1 = Integer.parseInt(m11);
            try {
                FileReader stud = new FileReader("Dog Walking.txt");
                BufferedReader studa = new BufferedReader(stud);
                String no = "";
                while ((no = studa.readLine()) != null) {
                    StringTokenizer pz = new StringTokenizer(no, "|");
                    String i = pz.nextToken();
                    String e = pz.nextToken();
                    int h2 = Integer.parseInt(pz.nextToken());
                    int min2 = Integer.parseInt(pz.nextToken());
                    Date e1 = format.parse(e);
                    long ltime = e1.getTime() + 1 * 24 * 60 * 60 * 1000;
                    Date today8 = new Date(ltime);
                    if (i.equals(comb)) {
                        if (ds.equals(e)) {

                            if (min1 >= min2) {
                                x1 = hr1 - h2;
                                y = min1 - min2;

                            }
                            if (min1 < min2) {
                                x1 = (hr1 - h2) - 1;
                                y = (min1 + 60) - min2;

                            }
                        } else if (ds.equals(format.format(today8))) {
                            if (min1 >= min2) {
                                x1 = (hr1 - h2) + 24;
                                y = min1 - min2;

                            }
                            if (min1 < min2) {
                                x1 = (hr1 - h2) + 23;
                                y = (min1 + 60) - min2;

                            }
                        }
                    }
                }
            } catch (Exception error) {

            }

            h.setText(String.valueOf(x1));
            min.setText(String.valueOf(y));

        }

        if (h11.equals("") || m11.equals("")) {
            h.setText("");
            min.setText("");

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_nacomboActionPerformed

    private void nacomboPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nacomboPropertyChange
        DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        String h11 = t4.getText();
        String m11 = t5.getText();
        int x = 0;
        int y = 0;
        Date date1 = new Date();

        String comb = "" + nacombo.getSelectedItem();
        String ds = format.format(date1);

        if (!(h11.equals("")) && !(m11.equals(""))) {
            int hr1 = Integer.parseInt(h11);
            int min1 = Integer.parseInt(m11);
            try {
                FileReader stud = new FileReader("Dog Walking.txt");
                BufferedReader studa = new BufferedReader(stud);
                String no = "";
                while ((no = studa.readLine()) != null) {
                    StringTokenizer pz = new StringTokenizer(no, "|");
                    String i = pz.nextToken();
                    String e = pz.nextToken();
                    int h2 = Integer.parseInt(pz.nextToken());
                    int min2 = Integer.parseInt(pz.nextToken());
                    Date e1 = format.parse(e);
                    long ltime = e1.getTime() + 1 * 24 * 60 * 60 * 1000;
                    Date today8 = new Date(ltime);
                    if (i.equals(comb)) {
                        if (ds.equals(e)) {

                            if (min1 >= min2) {
                                x = hr1 - h2;
                                y = min1 - min2;

                            }
                            if (min1 < min2) {
                                x = (hr1 - h2) - 1;
                                y = (min1 + 60) - min2;

                            }
                        } else if (ds.equals(format.format(today8))) {
                            if (min1 >= min2) {
                                x = (hr1 - h2) + 24;
                                y = min1 - min2;

                            }
                            if (min1 < min2) {
                                x = (hr1 - h2) + 23;
                                y = (min1 + 60) - min2;

                            }
                        }
                    }
                }
            } catch (Exception error) {

            }

            h.setText(String.valueOf(x));
            min.setText(String.valueOf(y));

        }

        if (h11.equals("") || m11.equals("")) {
            h.setText("");
            min.setText("");

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_nacomboPropertyChange

    private void t4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t4FocusGained
        te.setText("Time Ended (24hr clock):");
        te.setForeground(Color.black);          // TODO add your handling code here:
    }//GEN-LAST:event_t4FocusGained

    private void t4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t4ActionPerformed

    private void t4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t4KeyReleased

    }//GEN-LAST:event_t4KeyReleased

    private void t5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t5FocusGained
        te.setText("Time Ended (24hr clock):");
        te.setForeground(Color.black);           // TODO add your handling code here:
    }//GEN-LAST:event_t5FocusGained

    private void t5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t5ActionPerformed

    private void t5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t5KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_t5KeyReleased

    private void hActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String dog = "" + nacombo.getSelectedItem();
        DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        String h1 = t4.getText();
        String c = t5.getText();
        String h2 = h.getText();
        String cl = min.getText();
        boolean er = false;
        boolean ero = false;
        Date date1 = new Date();

        if (dog.equals(("Select Dog"))) {
            er = true;
            na1.setText("* Name of dog:");
            na1.setForeground(Color.red);
        }

        if (h1.equals("") || c.equals("")) {
            er = true;
            te.setText("* Time Ended (24hr clock):");
            te.setForeground(Color.red);
        }

        if (er == true) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please complete all fields", "Message:ERROR!", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        if (er == false && ero == false) {
            String db = format.format(date1);

            try {
                FileWriter gr = new FileWriter("Dogs checkin.txt", true);
                PrintWriter groom = new PrintWriter(gr);
                groom.println(db + "|" + dog + "|" + h1 + "|" + c + "|" + h2 + "|" + cl);
                groom.close();

            } catch (Exception error) {

            }

            nacombo.removeAllItems();
            nacombo.addItem("Select Dog");
            h.setEditable(false);
            min.setEditable(false);
            name1.setText("");
            t4.setText("");
            t5.setText("");
            h.setText("");
            min.setText("");
            t4.setEditable(false);
            t5.setEditable(false);

            String dat2 = format.format(date1);
            da.setText(String.valueOf(dat2));
            int hw = LocalDateTime.now().getHour();
            int m = LocalDateTime.now().getMinute();
            t4.setText(String.valueOf(hw));
            if (m < 10) {
                String m1 = "0" + String.valueOf(m);
                t5.setText(String.valueOf(m1));

            } else {
                t5.setText(String.valueOf(m));
            }
            h.setText("");
            min.setText("");
            try {
            FileReader tid = new FileReader("Dog Walking.txt");
            BufferedReader tdata = new BufferedReader(tid);
            String no = "";
            while ((no = tdata.readLine()) != null) {
                StringTokenizer ot = new StringTokenizer(no, "|");
                String c5 = ot.nextToken();
                String d = ot.nextToken();
                String c1 = ot.nextToken();
                String d1 = ot.nextToken();
                String c2 = ot.nextToken();
                String d3 = ot.nextToken();
                Date d2 = format.parse(d);
                nacombo.addItem(c5);
                try {
                    FileReader tida = new FileReader("Dogs checkin.txt");
                    BufferedReader tdataa = new BufferedReader(tida);
                    String noa = "";
                    while ((noa = tdataa.readLine()) != null) {
                        StringTokenizer ota = new StringTokenizer(noa, "|");
                        String ca = ota.nextToken();
                        String da5 = ota.nextToken();
                        String ca1 = ota.nextToken();
                        String da1 = ota.nextToken();
                        String ca2 = ota.nextToken();
                        String da3 = ota.nextToken();
                        Date da4 = format.parse(ca);
                        int dda;
                        int ddd;
                        if ((Integer.parseInt(ca2) + Integer.parseInt(ca1)) >= 24) {
                            dda = Math.round(Integer.parseInt(ca2) / 24);
                            ddd = dda + 1;

                        } else {
                            dda = 0;
                            ddd = 0;
                        }
                        Date dateBefore = new Date(da4.getTime() - dda * 24 * 3600 * 1000);
                        String db2 = format.format(dateBefore);
                        Date dateBefore1 = new Date(da4.getTime() - ddd * 24 * 3600 * 1000);
                        String db1 = format.format(dateBefore1);
                        if (da5.equals(c5)) {
                            if (db2.equals(d) || (db1.equals(d))) {
                                nacombo.removeItem(c5);

                            }

                        }

                    }

                } catch (Exception err) {

                }

            }

        } catch (Exception err) {

        }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void dateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateFocusGained

    }//GEN-LAST:event_dateFocusGained

    private void daFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_daFocusGained

    }//GEN-LAST:event_daFocusGained

    private void daKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_daKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_daKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField da;
    private javax.swing.JLabel da2;
    private javax.swing.JTextField date;
    private javax.swing.JTextField h;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField min;
    private javax.swing.JLabel na1;
    private javax.swing.JComboBox nacombo;
    private javax.swing.JTextField name1;
    private javax.swing.JTextField t4;
    private javax.swing.JTextField t5;
    private javax.swing.JLabel te;
    // End of variables declaration//GEN-END:variables
}
