
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.StringTokenizer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Rajul
 */
/*This form will display the details of all funds collected by the shelter. The user can also narrow down the search by limiting it to a specific time frame or volunteer. 
  Total funds collected will also be calculated. 
*/
public class Funds extends javax.swing.JPanel {

    DefaultTableModel model;

    /**
     * Creates new form Funds
     */
    public Funds() {
        initComponents();
        tab.setEnabled(false);
        model = (DefaultTableModel) tab.getModel();
        //tab.setEnabled(false);
        model.setRowCount(0);
        model.setColumnCount(0);
        model.addColumn("Event Name");
                model.addColumn("Date");
                c1.setVisible(false);
        model.addColumn("Volunteer in charge");
        model.addColumn("Items sold");
        model.addColumn("Funds raised");

        int p = 0;
        try {
            FileReader tid1 = new FileReader("Event funds.txt");
            BufferedReader tdata1 = new BufferedReader(tid1);
            String no1 = "";
            while ((no1 = tdata1.readLine()) != null) {
                StringTokenizer ot1 = new StringTokenizer(no1, "|");
                String c1 = ot1.nextToken();
                String d1 = ot1.nextToken();
                String e1 = ot1.nextToken();
                String f1 = ot1.nextToken();
                String g1 = ot1.nextToken();
                {
                    try {
                        FileReader stud = new FileReader("Volunteers.txt");
                        BufferedReader studa = new BufferedReader(stud);
                        String no = "";
                        while ((no = studa.readLine()) != null) {
                            StringTokenizer pz = new StringTokenizer(no, "|");
                            String i = pz.nextToken();
                            String e = pz.nextToken();
                            if (e1.equals(i)) {
                                try {
                                    FileReader stud1 = new FileReader("Upcoming Events.txt");
                                    BufferedReader studa1 = new BufferedReader(stud1);
                                    String no2 = "";
                                    while ((no2 = studa1.readLine()) != null) {
                                        StringTokenizer pz1 = new StringTokenizer(no2, "|");
                                        String i1 = pz1.nextToken();
                                        String e2 = pz1.nextToken();
                                        if (i1.equals(d1)) {

                                            model.insertRow(model.getRowCount(), new Object[]{e2, c1, e, f1, g1});
                                            p = p + (Integer.parseInt(g1));
                                        }
                                    }

                                } catch (Exception error) {

                                }

                            }
                        }

                    } catch (Exception error) {

                    }

                }
            }

        } catch (Exception err) {

        }
        fund.setText(String.valueOf(p));
        c1.removeAllItems();
        c1.addItem("Select Method");
        c1.addItem("Search by Year");
        c1.addItem("Search by Month");
        c1.addItem("Search by Volunteer");
        na.setVisible(false);
        nacombo.setVisible(false);
        year.setVisible(false);
        month.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab = new javax.swing.JTable();
        fund = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sp = new javax.swing.JRadioButton();
        c1 = new javax.swing.JComboBox<>();
        na = new javax.swing.JTextField();
        nacombo = new javax.swing.JComboBox<>();
        month = new com.toedter.calendar.JMonthChooser();
        year = new com.toedter.calendar.JYearChooser();

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setIcon(new javax.swing.ImageIcon("/Users/Rajul/Downloads/logo.gif")); // NOI18N
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 6, -1, -1));

        jLabel4.setFont(new java.awt.Font("Chalkboard", 0, 36)); // NOI18N
        jLabel4.setText("Funds Collected");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(58, 25, -1, -1));

        tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tab);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 145, 527, 222));

        fund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fundActionPerformed(evt);
            }
        });
        add(fund, new org.netbeans.lib.awtextra.AbsoluteConstraints(226, 373, 129, -1));

        jLabel1.setText("Total funds:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 378, -1, -1));

        jLabel2.setText("Dhs");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(367, 378, -1, -1));

        sp.setText("Specific Search");
        sp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spActionPerformed(evt);
            }
        });
        add(sp, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 78, -1, -1));

        c1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        c1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c1ActionPerformed(evt);
            }
        });
        add(c1, new org.netbeans.lib.awtextra.AbsoluteConstraints(204, 78, -1, -1));

        na.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        na.setForeground(java.awt.Color.lightGray);
        na.setText("Search");
        na.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                naFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                naFocusLost(evt);
            }
        });
        na.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                naKeyReleased(evt);
            }
        });
        add(na, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 106, 120, 30));

        nacombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nacombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nacomboActionPerformed(evt);
            }
        });
        nacombo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                nacomboPropertyChange(evt);
            }
        });
        add(nacombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 112, -1, -1));

        month.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                monthPropertyChange(evt);
            }
        });
        add(month, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        year.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                yearPropertyChange(evt);
            }
        });
        add(year, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void fundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fundActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fundActionPerformed

    private void spActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spActionPerformed
        if (sp.isSelected()) {
            c1.setVisible(true);

        } else if (!(sp.isSelected())) {
            c1.setVisible(false);
            na.setVisible(false);
            nacombo.setVisible(false);
            model.setRowCount(0);
             int p = 0;
        try {
            FileReader tid1 = new FileReader("Event funds.txt");
            BufferedReader tdata1 = new BufferedReader(tid1);
            String no1 = "";
            while ((no1 = tdata1.readLine()) != null) {
                StringTokenizer ot1 = new StringTokenizer(no1, "|");
                String c1 = ot1.nextToken();
                String d1 = ot1.nextToken();
                String e1 = ot1.nextToken();
                String f1 = ot1.nextToken();
                String g1 = ot1.nextToken();
                {
                    try {
                        FileReader stud = new FileReader("Volunteers.txt");
                        BufferedReader studa = new BufferedReader(stud);
                        String no = "";
                        while ((no = studa.readLine()) != null) {
                            StringTokenizer pz = new StringTokenizer(no, "|");
                            String i = pz.nextToken();
                            String e = pz.nextToken();
                            if (e1.equals(i)) {
                                try {
                                    FileReader stud1 = new FileReader("Upcoming Events.txt");
                                    BufferedReader studa1 = new BufferedReader(stud1);
                                    String no2 = "";
                                    while ((no2 = studa1.readLine()) != null) {
                                        StringTokenizer pz1 = new StringTokenizer(no2, "|");
                                        String i1 = pz1.nextToken();
                                        String e2 = pz1.nextToken();
                                        if (i1.equals(d1)) {

                                            model.insertRow(model.getRowCount(), new Object[]{e2, c1, e, f1, g1});
                                            p = p + (Integer.parseInt(g1));
                                        }
                                    }

                                } catch (Exception error) {

                                }

                            }
                        }

                    } catch (Exception error) {

                    }

                }
            }

        } catch (Exception err) {

        }
        fund.setText(String.valueOf(p));
        c1.removeAllItems();
        c1.addItem("Select Method");
        c1.addItem("Search by Year");
        c1.addItem("Search by Month");
        c1.addItem("Search by Volunteer");
        na.setVisible(false);
        nacombo.setVisible(false);
        year.setVisible(false);
        month.setVisible(false);
           
        }
    }//GEN-LAST:event_spActionPerformed

    private void c1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c1ActionPerformed
        String item = ""+c1.getSelectedItem();
        /*c1.addItem("Select Method");
        c1.addItem("Search by Year");
        c1.addItem("Search by Month");
        c1.addItem("Search by Volunteer");*/
        if (item.equals("Select Method")){
            year.setVisible(false);
            month.setVisible(false);
            na.setVisible(false);
            nacombo.setVisible(false);
        }
        if (item.equals("Search by Year")){
            year.setVisible(true);
            month.setVisible(false);
            na.setVisible(false);
            nacombo.setVisible(false);
            int x= year.getYear();
            model.setRowCount(0);
            int p = 0;
            try {
            FileReader tid1 = new FileReader("Event funds.txt");
            BufferedReader tdata1 = new BufferedReader(tid1);
            String no1 = "";
            while ((no1 = tdata1.readLine()) != null) {
                StringTokenizer ot1 = new StringTokenizer(no1, "|");
                String c2 = ot1.nextToken();
                String d1 = ot1.nextToken();
                String e1 = ot1.nextToken();
                String f1 = ot1.nextToken();
                String g1 = ot1.nextToken();
                {
                    try {
                        FileReader stud = new FileReader("Volunteers.txt");
                        BufferedReader studa = new BufferedReader(stud);
                        String no = "";
                        while ((no = studa.readLine()) != null) {
                            StringTokenizer pz = new StringTokenizer(no, "|");
                            String i = pz.nextToken();
                            String e = pz.nextToken();
                            if (e1.equals(i)) {
                                try {
                                    FileReader stud1 = new FileReader("Upcoming Events.txt");
                                    BufferedReader studa1 = new BufferedReader(stud1);
                                    String no2 = "";
                                    while ((no2 = studa1.readLine()) != null) {
                                        StringTokenizer pz1 = new StringTokenizer(no2, "|");
                                        String i1 = pz1.nextToken();
                                        String e2 = pz1.nextToken();
                                        if (i1.equals(d1)) {
                                            
                                            StringTokenizer pz2 = new StringTokenizer(c2, "/");
                                        String a1 = pz2.nextToken();
                                        String a2 = pz2.nextToken();
                                        String a3 = pz2.nextToken();
                                        if (Integer.parseInt(a3)==x){
                                            model.insertRow(model.getRowCount(), new Object[]{e2, c2, e, f1, g1});
                                            p = p + (Integer.parseInt(g1));
                                        }
                                    }

                                }} catch (Exception error) {

                                }

                            }
                        }

                    } catch (Exception error) {

                    }

                }
            }

        } catch (Exception err) {

        }
                    fund.setText(String.valueOf(p));

        }
         if (item.equals("Search by Month")){
            year.setVisible(true);
            month.setVisible(true);
            na.setVisible(false);
            nacombo.setVisible(false);
            int x = year.getYear();
            int y = month.getMonth()+1;
            String combo = ""+c1.getSelectedItem();
            if (combo.equals("Search by Month")){
            int p = 0;
            model.setRowCount(0);
            
            try {
            FileReader tid1 = new FileReader("Event funds.txt");
            BufferedReader tdata1 = new BufferedReader(tid1);
            String no1 = "";
            while ((no1 = tdata1.readLine()) != null) {
                StringTokenizer ot1 = new StringTokenizer(no1, "|");
                String c2 = ot1.nextToken();
                String d1 = ot1.nextToken();
                String e1 = ot1.nextToken();
                String f1 = ot1.nextToken();
                String g1 = ot1.nextToken();
                {
                    try {
                        FileReader stud = new FileReader("Volunteers.txt");
                        BufferedReader studa = new BufferedReader(stud);
                        String no = "";
                        while ((no = studa.readLine()) != null) {
                            StringTokenizer pz = new StringTokenizer(no, "|");
                            String i = pz.nextToken();
                            String e = pz.nextToken();
                            if (e1.equals(i)) {
                                try {
                                    FileReader stud1 = new FileReader("Upcoming Events.txt");
                                    BufferedReader studa1 = new BufferedReader(stud1);
                                    String no2 = "";
                                    while ((no2 = studa1.readLine()) != null) {
                                        StringTokenizer pz1 = new StringTokenizer(no2, "|");
                                        String i1 = pz1.nextToken();
                                        String e2 = pz1.nextToken();
                                        if (i1.equals(d1)) {
                                            
                                            StringTokenizer pz2 = new StringTokenizer(c2, "/");
                                        String a1 = pz2.nextToken();
                                        String a2 = pz2.nextToken();
                                        String a3 = pz2.nextToken();
                                        if (Integer.parseInt(a3)==x && Integer.parseInt(a2)==y){
                                            model.insertRow(model.getRowCount(), new Object[]{e2, c2, e, f1, g1});
                                            p = p + (Integer.parseInt(g1));
                                        }
                                    }

                                }} catch (Exception error) {

                                }

                            }
                        }

                    } catch (Exception error) {

                    }

                }
            }

        } catch (Exception err) {

        }
                    fund.setText(String.valueOf(p));

            
}
        }
          if (item.equals("Search by Volunteer")){
            year.setVisible(false);
            month.setVisible(false);
            na.setVisible(true);
            nacombo.setVisible(true);
            nacombo.removeAllItems();
             nacombo.addItem("Select Volunteer");
        try {
            FileReader tid = new FileReader("Volunteers.txt");
            BufferedReader tdata = new BufferedReader(tid);
            String no = "";
            while ((no = tdata.readLine()) != null) {
                StringTokenizer ot = new StringTokenizer(no, "|");
                String c = ot.nextToken();
                String d = ot.nextToken();

                nacombo.addItem(d);
            }

        } catch (Exception err) {

        }
        }

    }//GEN-LAST:event_c1ActionPerformed

    private void naKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_naKeyReleased
 nacombo.removeAllItems();
        String v = na.getText();
        int le = v.length();

        String x = "";
        try {
            FileReader tid = new FileReader("Volunteers.txt");
            BufferedReader tdata = new BufferedReader(tid);
            String no = "";
            while ((no = tdata.readLine()) != null) {
                StringTokenizer ot = new StringTokenizer(no, "|");
                String c = ot.nextToken();
                String d = ot.nextToken();

                x = "";
                for (int i = 0; i < le; i++) {
                    x = x + d.substring(i, i + 1);

                    if ((x).equals(v) || x.toUpperCase().equals(v) || x.toLowerCase().equals(v)) {
                        nacombo.addItem(d);
                    }

                }

            }
        } catch (Exception err) {

        }
        if (v.equals("")) {
            nacombo.removeAllItems();
            nacombo.addItem("Select Volunteer");
            try {
                FileReader tid = new FileReader("Volunteers.txt");
                BufferedReader tdata = new BufferedReader(tid);
                String no = "";
                while ((no = tdata.readLine()) != null) {
                    StringTokenizer ot = new StringTokenizer(no, "|");
                    String c = ot.nextToken();
                    String d = ot.nextToken();

                    nacombo.addItem(d);
                }

            } catch (Exception err) {

            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_naKeyReleased

    private void nacomboPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nacomboPropertyChange

    }//GEN-LAST:event_nacomboPropertyChange

    private void nacomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nacomboActionPerformed
String name = ""+nacombo.getSelectedItem();
model.setRowCount(0);
int p = 0;
try {
            FileReader tid1 = new FileReader("Event funds.txt");
            BufferedReader tdata1 = new BufferedReader(tid1);
            String no1 = "";
            while ((no1 = tdata1.readLine()) != null) {
                StringTokenizer ot1 = new StringTokenizer(no1, "|");
                String c1 = ot1.nextToken();
                String d1 = ot1.nextToken();
                String e1 = ot1.nextToken();
                String f1 = ot1.nextToken();
                String g1 = ot1.nextToken();
                {
                    try {
                        FileReader stud = new FileReader("Volunteers.txt");
                        BufferedReader studa = new BufferedReader(stud);
                        String no = "";
                        while ((no = studa.readLine()) != null) {
                            StringTokenizer pz = new StringTokenizer(no, "|");
                            String i = pz.nextToken();
                            String e = pz.nextToken();
                            if (e1.equals(i)&&e.equals(name)) {
                                
                            try {
                                    FileReader stud1 = new FileReader("Upcoming Events.txt");
                                    BufferedReader studa1 = new BufferedReader(stud1);
                                    String no2 = "";
                                    while ((no2 = studa1.readLine()) != null) {
                                        StringTokenizer pz1 = new StringTokenizer(no2, "|");
                                        String i1 = pz1.nextToken();
                                        String e2 = pz1.nextToken();
                                        if (i1.equals(d1)) {

                                            model.insertRow(model.getRowCount(), new Object[]{e2, c1, e, f1, g1});
                                            p = p + (Integer.parseInt(g1));
                                        }
                                    }

                                } catch (Exception error) {

                                }

                            }
                        }

                    } catch (Exception error) {

                    }

                }
            }

        } catch (Exception err) {

        }
fund.setText(String.valueOf(p));
        
        year.setVisible(false);
        month.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_nacomboActionPerformed

    private void yearPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_yearPropertyChange
int x= year.getYear();
String combo = ""+c1.getSelectedItem();
int y = month.getMonth() + 1;

if (combo.equals("Search by Year")){
            int p = 0;
            model.setRowCount(0);

            try {
            FileReader tid1 = new FileReader("Event funds.txt");
            BufferedReader tdata1 = new BufferedReader(tid1);
            String no1 = "";
            while ((no1 = tdata1.readLine()) != null) {
                StringTokenizer ot1 = new StringTokenizer(no1, "|");
                String c2 = ot1.nextToken();
                String d1 = ot1.nextToken();
                String e1 = ot1.nextToken();
                String f1 = ot1.nextToken();
                String g1 = ot1.nextToken();
                {
                    try {
                        FileReader stud = new FileReader("Volunteers.txt");
                        BufferedReader studa = new BufferedReader(stud);
                        String no = "";
                        while ((no = studa.readLine()) != null) {
                            StringTokenizer pz = new StringTokenizer(no, "|");
                            String i = pz.nextToken();
                            String e = pz.nextToken();
                            if (e1.equals(i)) {
                                try {
                                    FileReader stud1 = new FileReader("Upcoming Events.txt");
                                    BufferedReader studa1 = new BufferedReader(stud1);
                                    String no2 = "";
                                    while ((no2 = studa1.readLine()) != null) {
                                        StringTokenizer pz1 = new StringTokenizer(no2, "|");
                                        String i1 = pz1.nextToken();
                                        String e2 = pz1.nextToken();
                                        if (i1.equals(d1)) {
                                            
                                            StringTokenizer pz2 = new StringTokenizer(c2, "/");
                                        String a1 = pz2.nextToken();
                                        String a2 = pz2.nextToken();
                                        String a3 = pz2.nextToken();
                                        if (Integer.parseInt(a3)==x){
                                            model.insertRow(model.getRowCount(), new Object[]{e2, c2, e, f1, g1});
                                            p = p + (Integer.parseInt(g1));
                                        }
                                    }

                                }} catch (Exception error) {

                                }

                            }
                        }

                    } catch (Exception error) {

                    }

                }
            }

        } catch (Exception err) {

        }
                    fund.setText(String.valueOf(p));

            
}
if (combo.equals("Search by Month")){
            int p = 0;
            model.setRowCount(0);

            try {
            FileReader tid1 = new FileReader("Event funds.txt");
            BufferedReader tdata1 = new BufferedReader(tid1);
            String no1 = "";
            while ((no1 = tdata1.readLine()) != null) {
                StringTokenizer ot1 = new StringTokenizer(no1, "|");
                String c2 = ot1.nextToken();
                String d1 = ot1.nextToken();
                String e1 = ot1.nextToken();
                String f1 = ot1.nextToken();
                String g1 = ot1.nextToken();
                {
                    try {
                        FileReader stud = new FileReader("Volunteers.txt");
                        BufferedReader studa = new BufferedReader(stud);
                        String no = "";
                        while ((no = studa.readLine()) != null) {
                            StringTokenizer pz = new StringTokenizer(no, "|");
                            String i = pz.nextToken();
                            String e = pz.nextToken();
                            if (e1.equals(i)) {
                                try {
                                    FileReader stud1 = new FileReader("Upcoming Events.txt");
                                    BufferedReader studa1 = new BufferedReader(stud1);
                                    String no2 = "";
                                    while ((no2 = studa1.readLine()) != null) {
                                        StringTokenizer pz1 = new StringTokenizer(no2, "|");
                                        String i1 = pz1.nextToken();
                                        String e2 = pz1.nextToken();
                                        if (i1.equals(d1)) {
                                            
                                            StringTokenizer pz2 = new StringTokenizer(c2, "/");
                                        String a1 = pz2.nextToken();
                                        String a2 = pz2.nextToken();
                                        String a3 = pz2.nextToken();
                                        if (Integer.parseInt(a3)==x && Integer.parseInt(a2)==y){
                                            model.insertRow(model.getRowCount(), new Object[]{e2, c2, e, f1, g1});
                                            p = p + (Integer.parseInt(g1));
                                        }
                                    }

                                }} catch (Exception error) {

                                }

                            }
                        }

                    } catch (Exception error) {

                    }

                }
            }

        } catch (Exception err) {

        }
                    fund.setText(String.valueOf(p));

            
}


    }//GEN-LAST:event_yearPropertyChange

    private void monthPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_monthPropertyChange

int x= year.getYear();
int y = month.getMonth() + 1;
String combo = ""+c1.getSelectedItem();
if (combo.equals("Search by Month")){
            int p = 0;
            model.setRowCount(0);

            try {
            FileReader tid1 = new FileReader("Event funds.txt");
            BufferedReader tdata1 = new BufferedReader(tid1);
            String no1 = "";
            while ((no1 = tdata1.readLine()) != null) {
                StringTokenizer ot1 = new StringTokenizer(no1, "|");
                String c2 = ot1.nextToken();
                String d1 = ot1.nextToken();
                String e1 = ot1.nextToken();
                String f1 = ot1.nextToken();
                String g1 = ot1.nextToken();
                {
                    try {
                        FileReader stud = new FileReader("Volunteers.txt");
                        BufferedReader studa = new BufferedReader(stud);
                        String no = "";
                        while ((no = studa.readLine()) != null) {
                            StringTokenizer pz = new StringTokenizer(no, "|");
                            String i = pz.nextToken();
                            String e = pz.nextToken();
                            if (e1.equals(i)) {
                                try {
                                    FileReader stud1 = new FileReader("Upcoming Events.txt");
                                    BufferedReader studa1 = new BufferedReader(stud1);
                                    String no2 = "";
                                    while ((no2 = studa1.readLine()) != null) {
                                        StringTokenizer pz1 = new StringTokenizer(no2, "|");
                                        String i1 = pz1.nextToken();
                                        String e2 = pz1.nextToken();
                                        if (i1.equals(d1)) {
                                            
                                            StringTokenizer pz2 = new StringTokenizer(c2, "/");
                                        String a1 = pz2.nextToken();
                                        String a2 = pz2.nextToken();
                                        String a3 = pz2.nextToken();
                                        if (Integer.parseInt(a3)==x && Integer.parseInt(a2)==y){
                                            model.insertRow(model.getRowCount(), new Object[]{e2, c2, e, f1, g1});
                                            p = p + (Integer.parseInt(g1));
                                        }
                                    }

                                }} catch (Exception error) {

                                }

                            }
                        }

                    } catch (Exception error) {

                    }

                }
            }

        } catch (Exception err) {

        }
                    fund.setText(String.valueOf(p));

            
}



    }//GEN-LAST:event_monthPropertyChange

    private void naFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_naFocusLost
if ((na.getText()).equals("")){
    na.setText("Search");
    na.setForeground(Color.lightGray);}         // TODO add your handling code here:
    }//GEN-LAST:event_naFocusLost

    private void naFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_naFocusGained
    na.setText("");
    na.setForeground(Color.black);         // TODO add your handling code here:
    }//GEN-LAST:event_naFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> c1;
    private javax.swing.JTextField fund;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JMonthChooser month;
    private javax.swing.JTextField na;
    private javax.swing.JComboBox<String> nacombo;
    private javax.swing.JRadioButton sp;
    private javax.swing.JTable tab;
    private com.toedter.calendar.JYearChooser year;
    // End of variables declaration//GEN-END:variables
}
